
# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"
spring.datasource.url = jdbc:mysql://localhost:3306/cnsmi55?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false

#Server configuration
server.servlet.context-path=/consomiTounsi
spring.mvc.servlet.path=

#Username and password
spring.datasource.username = root
<<<<<<< HEAD
spring.datasource.password = root
#spring.datasource.password = 
spring.datasource.platform=mysql
=======
#spring.datasource.password = root
#spring.datasource.password = 
>>>>>>> 8d99f43b4dd65e6dfc435bdfa343e280e6c01826

server.port= 8081
#server.port= 9999
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update
#spring.jpa.hibernate.ddl-auto = create-drop

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
springdoc.swagger-ui.path=/api-ui.html
springdoc.api-docs.path=/api-docs
jwt.secret=javainuse
jwt.expiration.time=3600000

#Stripe keys
stripe.keys.public=pk_test_51IQgiCLDwpwISJZGZ7hKn2M4ZhPrIpw335kKg4d5sYxNxevzlG6vbtpnEPxW1D0xRjh9Puk1TC21hcaGcE59BIJn00BgE8O7SX
stripe.keys.secret=sk_test_51IQgiCLDwpwISJZGbdAMrSWXAYT7zyl0JUPQNvv3lyCG8DCtkhxqpfWs8K2ZgoTcQwy1N3Z28b4yjNwV9wjPr0Db00XqoJWAN1


# Preferred JSON mapper to use for HTTP message conversion.
spring.http.converters.preferred-json-mapper=gson